package cs1302.arcade;

import javafx.scene.control.Labeled;
import javafx.scene.text.*;
import javafx.scene.layout.BackgroundFill;
import javafx.geometry.Orientation;
import javafx.scene.layout.Background;
import javafx.geometry.Insets;
import javafx.event.ActionEvent;
import javafx.scene.*;
import javafx.scene.layout.CornerRadii;
import javafx.scene.paint.Color;
import cs1302.arcade.game2048.*;
import cs1302.arcade.gameTetris.*;
import java.util.Random;
import javafx.scene.control.Separator;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.control.Button;
import javafx.scene.layout.Pane;
//import java.awt.Font;
import javafx.scene.text.Font;
import javafx.scene.layout.VBox;


public class ArcadeApp extends Application {
    Separator style = new Separator(Orientation.HORIZONTAL);

    Group group = new Group();           // main container
    Random rng = new Random();           // random number generator
    //Rectangle r = new Rectangle(20, 20); // some rectangle
    Tile r = new Tile();
    Game2048 game = new Game2048();

    GameTetris game_1 = new GameTetris();
    Stage stage = new Stage();    
    Stage stage1;
    /**
     * Return a mouse event handler that moves to the rectangle to a random
     * position any time a mouse event is generated by the associated node.
     * @return the mouse event handler
     */
    private EventHandler<? super MouseEvent> createMouseHandler() {
	return event -> {
	    System.out.println(event);
	    r.setX(rng.nextDouble() * (480 - 100/*r.getWidth()*/));
	    r.setY(rng.nextDouble() * (640 - 100/*r.getHeight()*/));
	};
    } // createMouseHandler

    /**
     * Return a key event handler that moves to the rectangle to the left
     * or the right depending on what key event is generated by the associated
     * node.
     * @return the key event handler
     */
    private EventHandler<? super KeyEvent> createKeyHandler() {
	return event -> {
	    System.out.println(event);
	    if (event.getCode() == KeyCode.LEFT)  r.setX(r.getX() - 10.0);
	    if (event.getCode() == KeyCode.RIGHT) r.setX(r.getX() + 10.0);
	    // TODO bounds checking
	};
    } // createKeyHandler
    Scene scene1;

    public Scene getScene()
        {

            Scene scene2 = scene1;
            return scene1;
        }
    public Stage getStage()
        {
//            Stage stage3 = stage;
            return stage;
        }
    


           
    public void mainMenu() {
        Font font = Font.font("Lucida Sans Typewriter", FontWeight.BOLD, 50);
        //      Scene scene1;
        Font font1 = Font.font("Lucida Sans Typewriter", FontWeight.BOLD, 50);
        Button b1 = new Button("2048 Game");
        b1.setFont(font);
        b1.setStyle(" -fx-background-color: Orange");
        b1.setOnAction(e -> {
                System.out.println("Launching 2048!");
                stage.setScene(game.getGameScene());
            });
        //System.out.println("Fonts: " + javafx.scene.text.Font.getFamilies());
        b1.setMinWidth(150);
        Button b2 = new Button("Tetris Game");
        b2.setMinWidth(150);
        b2.setFont(font1);
        b2.setStyle("-fx-background-color: #00CE52;");
//            game2.setPadding(new Insets(10, 50, 100, 50));
        b2.setOnAction(e ->{
                System.out.println("Launching Tetris!");
                stage.setScene(game_1.getGameScene());
//                stage.show();
            });                             
        Button exit = new Button("Exit");
        exit.setMinWidth(50);
        exit.setStyle("-fx-background-color: Red");
        exit.setOnAction(e -> System.exit(0));
        style.setPadding(new Insets(30, 10, 10, 30));
        
        VBox newPane = new VBox(b1, style, b2, exit);
        
        newPane.setBackground(new Background(new BackgroundFill(Color.DARKGRAY, CornerRadii.EMPTY, Insets.EMPTY)));
        newPane.setPadding(new Insets(10, 10, 10, 10));  
        newPane.setSpacing(10);
        scene1 = new Scene(newPane);
//        System.out.println("sup boi" + stage);
//        stage = new Stage();
        stage.setScene(scene1);
        //stage.show();
    }

    public void backtoMain()
        {
            
        }
    

    /** {@inheritdoc} */
    @Override
    public void start(Stage stage) {
        this.stage = stage;
        Scene scene = new Scene(group, 480, 640);
        stage.setTitle("cs1302-arcade!");
//        getStage(stage);
        mainMenu();
        stage.sizeToScene();
        stage.show();
    } //start
} // ArcadeApp
